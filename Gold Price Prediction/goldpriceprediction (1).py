# -*- coding: utf-8 -*-
"""GoldPricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hatf1LCjyqhTPBGb8qxcv1azQTNHHhA2

#ðŸ“ˆGold Price Prediction Model

We are provided with daily gold price data spanning a 10-year period, from March 2008 to May 2018. The objective is to predict gold prices based on various financial indicators using machine learning techniques.

To achieve this, we employ a Random Forest Regressor, a powerful ensemble model known for its accuracy and robustness. As part of the data analysis process, we explore the dataset, identify correlations between features, and use these insights to train and evaluate the model for accurate gold price predictions

Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor #to predict continuous numerical values
from sklearn import metrics

#Random Forest -  combines multiple models to make a stronger, more accurate prediction.

"""Data Collection & Processing"""

data = pd.read_csv('/content/gld_price_data.csv')
data

data.head(5)

data.tail(5)

data.describe()

"""We can determine the average gold price and percentiles of the prices"""

data.info()

data.columns.tolist()

data.shape #number of rows and columns

#checking for number of missing values
data.isnull().sum()

"""**Correlation between different features**

**Types of Correlation:**

1. *Positive Correlation* - one feature increases, other increases

2. *Negative Correlation* - one feature increases, other decreases
"""

correlation = data.select_dtypes(include='number').corr()

"""Heatmap to Understand Correlation"""

plt.figure(figsize=(8,8))

sns.heatmap(correlation,cbar=True, square = True, fmt = '.1f', annot=True, annot_kws={'size':8},cmap='Blues' )
#fmt=1f -> one floating point digit after decimal
#cbar = coloured bar
# annotations = labels

"""The legend shows the negative and negative correlations. We can determine the positively correlated features.

* Silver and Gold Price are positively correlated
* 0 = not correlated
"""

#correlation values of gold
print(correlation['GLD'])

#checking the distribution of gold values

sns.distplot(data['GLD'], color='green')

"""Most of the gold price values are concentrated around 120, indicating it as a common or average range during the 10-year period. In contrast, fewer values lie in the lower (60â€“80) and higher (around 180) ranges, suggesting that extreme price fluctuations were relatively rare.

Splitting Features & Target (gold price)
"""

X = data.drop(['Date','GLD'], axis=1) #to drop a column axis =1
Y = data['GLD']
#X = feature Y = Gold

print(X,Y)

"""Training Data and Testing Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2) #splitting the data randomly

"""**Model Training using Random Forest Regressor **

*Random Forest* - ensemble model of decision tree (combination of different decision trees)
"""

regressor = RandomForestRegressor(n_estimators=100) #it used 100 decision trees

#training the model

regressor.fit(X_train, Y_train)

#now the model is trained

"""Model Evaluation"""

#predicting test data
test_data_pred = regressor.predict(X_test)

print(test_data_pred)

#values predicted by model

error_score = metrics.r2_score(Y_test, test_data_pred)
print("R2 = ", error_score)

"""The RÂ² score, also called R-squared, is a statistical measure that tells you how well your regression model fits the data.

Compare Actual & Predicted values in Plot
"""

#converting y_test to a list to the plot
Y_test = list(Y_test)

plt.plot(Y_test, color='blue', label = "Actual Value")
plt.plot(test_data_pred, color='green', label = 'Predicted Value')
plt.title("Actual Vs Predicted Gold Price")
plt.xlabel("Number of values")
plt.ylabel("Gold Price")
plt.legend()
plt.show()

#closer points indicates accuracy

"""Plot showing Gold and Silver Prices Over the Years"""

gold = list(data['GLD'])
silver = list(data['SLV'])
data['Date'] = pd.to_datetime(data['Date']) #convert date into datetime format
plt.plot(data['Date'],gold,color='blue', label='Gold Price')
plt.plot(data['Date'],silver, color='green', label='Silver Price')
plt.legend()
plt.title("Gold and Silver Prices Over the Years")
plt.xlabel("Years")
plt.ylabel("Price in USD")
plt.tight_layout()
plt.grid(True)

gold = list(data['GLD'])
oil_prices = list(data['USO'])
data['Date'] = pd.to_datetime(data['Date']) #convert date into datetime format
plt.plot(data['Date'],gold,color='orange', label='Gold Price')
plt.plot(data['Date'],oil_prices, color='red', label='Oil Price')
plt.legend()
plt.title("Gold and Oil Prices Over the Years")
plt.xlabel("Years")
plt.ylabel("Price in USD")
plt.tight_layout()
plt.grid(True)

